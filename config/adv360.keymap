/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        check_battery: check_battery {
            compatible = "zmk,behavior-tap-dance";
            label = "CHECK_BATTERY";
            #binding-cells = <0>;
            bindings = <&mo 3>, <&rgb_ug RGB_TOG>;
        };

        tap_and_mo: tap_and_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_AND_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <400>;
        };

        tap_and_tog: tap_and_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_AND_TOG";
            bindings = <&tog>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        paran_brack_brace_chev_left: paran_brack_brace_chev_left {
            compatible = "zmk,behavior-tap-dance";
            label = "paran_brack_brace_chev_left";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_PARENTHESIS>,
                <&kp LEFT_BRACKET>,
                <&kp LEFT_BRACE>,
                <&kp LESS_THAN>;
        };

        paran_brack_brace_chev_right: paran_brack_brace_chev_right {
            compatible = "zmk,behavior-tap-dance";
            label = "PARAN_BRACK_BRACE_CHEV_RIGHT";
            #binding-cells = <0>;
            bindings =
                <&kp RIGHT_PARENTHESIS>,
                <&kp RIGHT_BRACKET>,
                <&kp RIGHT_BRACE>,
                <&kp GREATER_THAN>;
        };

        minus_key: minus_key {
            compatible = "zmk,behavior-tap-dance";
            label = "MINUS_KEY";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
        };

        equal_key: equal_key {
            compatible = "zmk,behavior-tap-dance";
            label = "EQUAL_KEY";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp PLUS>;
        };

        one_key: one_key {
            compatible = "zmk,behavior-tap-dance";
            label = "ONE_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(NUMBER_1) NUMBER_1>, <&kp EXCLAMATION>;
        };

        two_key: two_key {
            compatible = "zmk,behavior-tap-dance";
            label = "TWO_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(NUMBER_2) NUMBER_2>, <&kp AT_SIGN>;
        };

        three_key: three_key {
            compatible = "zmk,behavior-tap-dance";
            label = "THREE_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(NUMBER_3) NUMBER_3>, <&kp HASH>;
        };

        four_key: four_key {
            compatible = "zmk,behavior-tap-dance";
            label = "FOUR_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(NUMBER_4) NUMBER_4>, <&kp DOLLAR>;
        };

        five_key: five_key {
            compatible = "zmk,behavior-tap-dance";
            label = "FIVE_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(NUMBER_5) NUMBER_5>, <&kp PERCENT>;
        };

        six_key: six_key {
            compatible = "zmk,behavior-tap-dance";
            label = "SIX_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(NUMBER_6) NUMBER_6>, <&kp CARET>;
        };

        seven_key: seven_key {
            compatible = "zmk,behavior-tap-dance";
            label = "SEVEN_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(NUMBER_7) NUMBER_7>, <&kp AMPERSAND>;
        };

        eight_key: eight_key {
            compatible = "zmk,behavior-tap-dance";
            label = "EIGHT_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(NUMBER_8) NUMBER_8>, <&kp ASTERISK>;
        };

        nine_key: nine_key {
            compatible = "zmk,behavior-tap-dance";
            label = "NINE_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(NUMBER_9) NUMBER_9>, <&kp LEFT_PARENTHESIS>;
        };

        zero_key: zero_key {
            compatible = "zmk,behavior-tap-dance";
            label = "ZERO_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(NUMBER_0) NUMBER_0>, <&kp RIGHT_PARENTHESIS>;
        };

        q_key: q_key {
            compatible = "zmk,behavior-tap-dance";
            label = "Q_KEY";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&mt LS(Q) Q>, <&mt LC(Q) Q>, <&mt LA(Q) Q>;
        };

        w_key: w_key {
            compatible = "zmk,behavior-tap-dance";
            label = "W_KEY";
            #binding-cells = <0>;
            bindings = <&kp W>, <&mt LS(W) W>, <&mt LC(W) W>, <&mt LA(W) W>;
        };

        f_key: f_key {
            compatible = "zmk,behavior-tap-dance";
            label = "F_KEY";
            #binding-cells = <0>;
            bindings = <&kp F>, <&mt LS(F) F>, <&mt LC(F) F>, <&mt LA(F) F>;
        };

        p_key: p_key {
            compatible = "zmk,behavior-tap-dance";
            label = "P_KEY";
            #binding-cells = <0>;
            bindings = <&kp P>, <&mt LS(P) P>, <&mt LC(P) P>, <&mt LA(P) P>;
        };

        b_key: b_key {
            compatible = "zmk,behavior-tap-dance";
            label = "B_KEY";
            #binding-cells = <0>;
            bindings = <&kp B>, <&mt LS(B) B>, <&mt LC(B) B>, <&mt LA(B) B>;
        };

        j_key: j_key {
            compatible = "zmk,behavior-tap-dance";
            label = "J_KEY";
            #binding-cells = <0>;
            bindings = <&kp J>, <&mt RS(J) J>, <&mt RC(J) J>, <&mt RA(J) J>;
        };

        l_key: l_key {
            compatible = "zmk,behavior-tap-dance";
            label = "L_KEY";
            #binding-cells = <0>;
            bindings = <&kp L>, <&mt RS(L) L>, <&mt RC(L) L>, <&mt RA(L) L>;
        };

        u_key: u_key {
            compatible = "zmk,behavior-tap-dance";
            label = "U_KEY";
            #binding-cells = <0>;
            bindings = <&kp U>, <&mt RS(U) U>, <&mt RC(U) U>, <&mt RA(U) U>;
        };

        y_key: y_key {
            compatible = "zmk,behavior-tap-dance";
            label = "Y_KEY";
            #binding-cells = <0>;
            bindings = <&kp Y>, <&mt RS(Y) Y>, <&mt RC(Y) Y>, <&mt RA(Y) Y>;
        };

        a_key: a_key {
            compatible = "zmk,behavior-tap-dance";
            label = "A_KEY";
            #binding-cells = <0>;
            bindings = <&kp A>, <&mt LS(A) A>, <&mt LC(A) A>, <&mt LA(A) A>;
        };

        r_key: r_key {
            compatible = "zmk,behavior-tap-dance";
            label = "R_KEY";
            #binding-cells = <0>;
            bindings = <&kp R>, <&mt LS(R) R>, <&mt LC(R) R>, <&mt LA(R) R>;
        };

        s_key: s_key {
            compatible = "zmk,behavior-tap-dance";
            label = "S_KEY";
            #binding-cells = <0>;
            bindings = <&kp S>, <&mt LS(S) S>, <&mt LC(S) S>, <&mt LA(S) S>;
        };

        t_key: t_key {
            compatible = "zmk,behavior-tap-dance";
            label = "T_KEY";
            #binding-cells = <0>;
            bindings = <&kp T>, <&mt LS(T) T>, <&mt LC(T) T>, <&mt LA(T) T>;
        };

        g_key: g_key {
            compatible = "zmk,behavior-tap-dance";
            label = "G_KEY";
            #binding-cells = <0>;
            bindings = <&kp G>, <&mt LS(G) G>, <&mt LC(G) G>, <&mt LA(G) G>;
        };

        m_key: m_key {
            compatible = "zmk,behavior-tap-dance";
            label = "M_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(M) M>, <&kp LS(M)>;
        };

        n_key: n_key {
            compatible = "zmk,behavior-tap-dance";
            label = "N_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(N) N>, <&kp LS(N)>;
        };

        e_key: e_key {
            compatible = "zmk,behavior-tap-dance";
            label = "E_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(E) E>, <&kp LS(E)>;
        };

        i_key: i_key {
            compatible = "zmk,behavior-tap-dance";
            label = "I_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(I) I>, <&kp LS(I)>;
        };

        o_key: o_key {
            compatible = "zmk,behavior-tap-dance";
            label = "O_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(O) O>, <&kp LS(O)>;
        };

        z_key: z_key {
            compatible = "zmk,behavior-tap-dance";
            label = "Z_KEY";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&mt LS(Z) Z>, <&mt LC(Z) Z>, <&mt LA(Z) Z>;
        };

        x_key: x_key {
            compatible = "zmk,behavior-tap-dance";
            label = "X_KEY";
            #binding-cells = <0>;
            bindings = <&kp X>, <&mt LS(X) X>, <&mt LC(X) X>, <&mt LA(X) X>;
        };

        c_key: c_key {
            compatible = "zmk,behavior-tap-dance";
            label = "C_KEY";
            #binding-cells = <0>;
            bindings = <&kp C>, <&mt LS(C) C>, <&mt LC(C) C>, <&mt LA(C) C>;
        };

        d_key: d_key {
            compatible = "zmk,behavior-tap-dance";
            label = "D_KEY";
            #binding-cells = <0>;
            bindings = <&kp D>, <&mt LS(D) D>, <&mt LC(D) D>, <&mt LA(D) D>;
        };

        v_key: v_key {
            compatible = "zmk,behavior-tap-dance";
            label = "V_KEY";
            #binding-cells = <0>;
            bindings = <&kp V>, <&mt LS(V) V>, <&mt LC(V) V>, <&mt LA(V) V>;
        };

        k_key: k_key {
            compatible = "zmk,behavior-tap-dance";
            label = "K_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(K) K>, <&kp LS(K)>;
        };

        h_key: h_key {
            compatible = "zmk,behavior-tap-dance";
            label = "H_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(H) H>, <&kp LS(H)>;
        };

        semicolon_key: semicolon_key {
            compatible = "zmk,behavior-tap-dance";
            label = "SEMICOLON_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(SEMICOLON) SEMICOLON>, <&kp COLON>;
        };

        backslash_key: backslash_key {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKSLASH_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(BACKSLASH) BACKSLASH>, <&kp PIPE>;
        };

        single_quote_key: single_quote_key {
            compatible = "zmk,behavior-tap-dance";
            label = "SINGLE_QUOTE_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(SINGLE_QUOTE) SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };

        comma_key: comma_key {
            compatible = "zmk,behavior-tap-dance";
            label = "COMMA_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(COMMA) COMMA>, <&kp COMMA>;
        };

        period_key: period_key {
            compatible = "zmk,behavior-tap-dance";
            label = "PERIOD_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(PERIOD) PERIOD>, <&kp PERIOD>;
        };

        slash_key: slash_key {
            compatible = "zmk,behavior-tap-dance";
            label = "SLASH_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(SLASH) SLASH>, <&kp SLASH>;
        };

        grave_key: grave_key {
            compatible = "zmk,behavior-tap-dance";
            label = "GRAVE_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(GRAVE) GRAVE>, <&kp TILDE>;
        };

        left_bracket_key: left_bracket_key {
            compatible = "zmk,behavior-tap-dance";
            label = "LEFT_BRACKET_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(LEFT_BRACKET) LEFT_BRACKET>, <&kp LEFT_BRACE>;
        };

        right_bracket_key: right_bracket_key {
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_BRACKET_KEY";
            #binding-cells = <0>;
            bindings = <&mt LC(RIGHT_BRACE) RIGHT_BRACE>, <&kp RIGHT_BRACE>;
        };
    };

    combos { compatible = "zmk,combos"; };

    macros {
        start_calculator: start_calculator {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LWIN &kp C &kp A &kp L &kp C &kp U &kp L &kp A &kp T &kp O &kp R &kp ENTER>,
                <&macro_tap>;

            label = "START_CALCULATOR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none           &one_key                     &two_key    &three_key  &four_key  &five_key  &minus_key                                                                                                       &equal_key                     &six_key  &seven_key  &eight_key  &nine_key          &zero_key           &kp PSCRN
&kp TAB         &q_key                       &w_key      &f_key      &p_key     &b_key     &paran_brack_brace_chev_left                                                                                     &paran_brack_brace_chev_right  &j_key    &l_key      &u_key      &y_key             &semicolon_key      &backslash_key
&kp ESCAPE      &a_key                       &r_key      &s_key      &t_key     &g_key     &kp LALT                      &kp LEFT_CONTROL  &kp LEFT_GUI            &kp LEFT_GUI          &kp RIGHT_CONTROL  &kp RALT                       &m_key    &n_key      &e_key      &i_key             &o_key              &single_quote_key
&kp LEFT_SHIFT  &z_key                       &x_key      &c_key      &d_key     &v_key                                                     &tap_and_mo 1 HOME      &tap_and_mo 1 PG_UP                                                     &k_key    &h_key      &comma_key  &period_key        &slash_key          &kp RIGHT_SHIFT
&mo 3           &mt K_CONTEXT_MENU CAPSLOCK  &grave_key  &kp LEFT    &kp RIGHT             &kp BACKSPACE                 &kp SPACE         &tap_and_tog 2 END      &tap_and_tog 2 PG_DN  &kp ENTER          &kp DELETE                               &kp UP      &kp DOWN    &left_bracket_key  &right_bracket_key  &mo 3
            >;
        };

        layer_symbols {
            bindings = <
&kp TILDE  &kp GRAVE  &kp POUND  &kp SEMI   &kp COLON   &none  &none                                    &none  &none  &kp BSLH  &kp FSLH  &kp PIPE   &none           &none
&none      &kp PRCNT  &kp DLLR   &kp SQT    &kp DQT     &none  &none                                    &none  &none  &kp LBKT  &kp RBKT  &kp LT     &kp GT          &none
&none      &kp AT     &kp AMPS   &kp COMMA  &kp PERIOD  &none  &none  &none  &none       &none   &none  &none  &none  &kp LPAR  &kp RPAR  &kp MINUS  &kp UNDERSCORE  &none
&none      &kp CARET  &kp ASTRK  &kp EXCL   &kp QMARK   &none                &trans      &trans                &none  &kp LBRC  &kp RBRC  &kp EQUAL  &kp PLUS        &none
&none      &none      &none      &none      &none              &none  &none  &none       &none   &none  &none         &none     &none     &none      &none           &none
            >;
        };

        layer_keypad {
            bindings = <
&none   &none       &kp LPAR  &kp RPAR  &kp FSLH  &none      &trans                                                         &trans         &none      &kp LPAR  &kp RPAR  &kp FSLH  &none      &none
&trans  &kp EQUAL   &kp N7    &kp N8    &kp N9    &kp ASTRK  &trans                                                         &trans         &kp EQUAL  &kp N7    &kp N8    &kp N9    &kp ASTRK  &kp TAB
&trans  &kp PERIOD  &kp N4    &kp N5    &kp N6    &kp PLUS   &trans         &trans     &trans         &trans     &trans     &trans         &kp DOT    &kp N4    &kp N5    &kp N6    &kp PLUS   &kp ESC
&trans  &kp N0      &kp N1    &kp N2    &kp N3    &kp MINUS                            &kp CLEAR      &kp CLEAR                            &kp N0     &kp N1    &kp N2    &kp N3    &kp MINUS  &kp RIGHT_SHIFT
&trans  &none       &none     &trans    &trans               &kp BACKSPACE  &kp ENTER  &trans         &trans     &kp ENTER  &kp BACKSPACE             &trans    &trans    &none     &none      &trans
            >;
        };

        layer_fn {
            bindings = <
&none       &kp F1        &kp F2        &kp F3        &kp F4         &kp F5        &kp F11                                                                 &kp F12                 &kp F6  &kp F7          &kp F8        &kp F9    &kp F10  &none
&none       &none         &none         &none         &none          &none         &none                                                                   &none                   &none   &none           &none         &none     &none    &none
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3   &bt BT_SEL 4  &none    &rgb_ug RGB_TOG  &bl BL_TOG      &kp C_MUTE       &none        &rgb_ug RGB_MEFS_CMD 5  &none   &kp KP_NUMLOCK  &kp CAPS      &kp SLCK  &none    &none
&none       &none         &none         &none         &macro_ver     &none                                   &bl BL_INC      &kp C_VOLUME_UP                                       &none   &none           &none         &none     &none    &none
&trans      &none         &none         &kp LG(LEFT)  &kp LG(RIGHT)                &none    &bootloader      &bl BL_DEC      &kp C_VOL_DN     &bootloader  &none                           &kp LG(UP)      &kp LG(DOWN)  &none     &none    &trans
            >;
        };

        Archive_Colemak_DH_01 {
            bindings = <
&mt LS(EQUAL) EQUAL  &mt LS(N1) N1            &mt LS(N2) N2        &mt LS(N3) NUMBER_3  &mt LS(N4) N4  &mt LS(N5) N5  &kp LG(L)                                                                          &kp INS            &mt RS(N6) NUMBER_6  &mt RS(N7) N7  &mt RS(N8) N8        &mt RS(N9) N9      &mt RS(N0) N0      &mt RS(MINUS) MINUS
&kp TAB              &mt LC(Q) Q              &mt LC(W) W          &mt LC(F) F          &mt LC(P) P    &mt LC(B) B    &kp PSCRN                                                                          &start_calculator  &mt RC(J) J          &mt RC(L) L    &mt RC(U) U          &mt RC(Y) Y        &mt RS(SEMI) SEMI  &mt RS(BSLH) BSLH
&kp ESC              &mt LC(A) A              &mt LC(R) R          &mt LC(S) S          &mt LC(T) T    &mt LC(G) G    &kp LALT       &kp LCTRL  &kp LGUI                &kp LWIN              &kp RCTRL  &kp RALT           &mt RC(M) M          &mt RC(N) N    &mt RC(E) E          &mt RC(I) I        &mt RC(O) O        &mt RS(SQT) SQT
&kp LEFT_SHIFT       &mt LC(Z) Z              &mt LC(X) X          &mt LC(C) C          &mt LC(D) D    &mt LC(V) V                              &tap_and_mo 1 HOME      &tap_and_mo 1 PG_UP                                 &mt RC(K) K          &mt RC(H) H    &mt RS(COMMA) COMMA  &mt RS(DOT) DOT    &mt RS(FSLH) FSLH  &kp RIGHT_SHIFT
&mo 3                &mt K_CONTEXT_MENU CAPS  &mt LS(GRAVE) GRAVE  &kp LEFT             &kp RIGHT                     &kp BACKSPACE  &kp SPACE  &tap_and_tog 2 END      &tap_and_tog 2 PG_DN  &kp ENTER  &kp DEL                                 &kp UP         &kp DOWN             &mt RS(LBKT) LBKT  &mt RS(RBKT) RBKT  &mo 3
            >;
        };

        Archive_Colemak_DH_02 {
            bindings = <
&none           &mt EXCLAMATION N1           &mt AT_SIGN N2   &mt POUND NUMBER_3  &mt DOLLAR N4  &mt PERCENT N5  &minus_key                                                                                                       &equal_key                     &mt CARET NUMBER_6  &mt AMPERSAND N7  &mt ASTERISK N8      &mt LEFT_PARENTHESIS N9  &mt RIGHT_PARENTHESIS N0  &kp PSCRN
&kp TAB         &mt LC(Q) Q                  &mt LC(W) W      &mt LC(F) F         &mt LC(P) P    &mt LC(B) B     &paran_brack_brace_chev_left                                                                                     &paran_brack_brace_chev_right  &mt RC(J) J         &mt RC(L) L       &mt RC(U) U          &mt RC(Y) Y              &mt COLON SEMI            &mt PIPE BSLH
&kp ESCAPE      &mt LC(A) A                  &mt LC(R) R      &mt LC(S) S         &mt LC(T) T    &mt LC(G) G     &kp LALT                      &kp LEFT_CONTROL  &kp LEFT_GUI            &kp LEFT_GUI          &kp RIGHT_CONTROL  &kp RALT                       &mt RC(M) M         &mt RC(N) N       &mt RC(E) E          &mt RC(I) I              &mt RC(O) O               &mt DOUBLE_QUOTES SQT
&kp LEFT_SHIFT  &mt LC(Z) Z                  &mt LC(X) X      &mt LC(C) C         &mt LC(D) D    &mt LC(V) V                                                     &tap_and_mo 1 HOME      &tap_and_mo 1 PG_UP                                                     &mt RC(K) K         &mt RC(H) H       &mt LESS_THAN COMMA  &mt GREATER_THAN DOT     &mt QUESTION FSLH         &kp RIGHT_SHIFT
&mo 3           &mt K_CONTEXT_MENU CAPSLOCK  &mt TILDE GRAVE  &kp LEFT            &kp RIGHT                      &kp BACKSPACE                 &kp SPACE         &tap_and_tog 2 END      &tap_and_tog 2 PG_DN  &kp ENTER          &kp DELETE                                         &kp UP            &kp DOWN             &mt LEFT_BRACE LBKT      &mt RIGHT_BRACE RBKT      &mo 3
            >;
        };

        Archive_Colemak_DH_03 {
            bindings = <
&none           &mt EXCLAMATION N1           &mt AT_SIGN N2   &mt POUND NUMBER_3  &mt DOLLAR N4  &mt PERCENT N5  &mt UNDERSCORE MINUS                                                                                             &mt PLUS EQUAL                 &mt CARET NUMBER_6  &mt AMPERSAND N7  &mt ASTERISK N8      &mt LEFT_PARENTHESIS N9  &mt RIGHT_PARENTHESIS N0  &kp PSCRN
&kp TAB         &mt LS(Q) Q                  &mt LS(W) W      &mt LS(F) F         &mt LS(P) P    &mt LS(B) B     &paran_brack_brace_chev_left                                                                                     &paran_brack_brace_chev_right  &mt LS(J) J         &mt LS(L) L       &mt LS(U) U          &mt LS(Y) Y              &mt COLON SEMI            &mt PIPE BSLH
&kp ESCAPE      &mt LS(A) A                  &mt LS(R) R      &mt LS(S) S         &mt LS(T) T    &mt LS(G) G     &kp LALT                      &kp LEFT_CONTROL  &kp LEFT_GUI            &kp LEFT_GUI          &kp RIGHT_CONTROL  &kp RALT                       &mt LS(M) M         &mt LS(N) N       &mt LS(E) E          &mt LS(I) I              &mt RC(O) O               &mt DOUBLE_QUOTES SQT
&kp LEFT_SHIFT  &mt LS(Z) Z                  &mt LS(X) X      &mt LS(C) C         &mt LS(D) D    &mt LS(V) V                                                     &tap_and_mo 1 HOME      &tap_and_mo 1 PG_UP                                                     &mt LS(K) K         &mt LS(H) H       &mt LESS_THAN COMMA  &mt GREATER_THAN DOT     &mt QUESTION FSLH         &kp RIGHT_SHIFT
&mo 3           &mt K_CONTEXT_MENU CAPSLOCK  &mt TILDE GRAVE  &kp LEFT            &kp RIGHT                      &kp BACKSPACE                 &kp SPACE         &tap_and_tog 2 END      &tap_and_tog 2 PG_DN  &kp ENTER          &kp DELETE                                         &kp UP            &kp DOWN             &mt LEFT_BRACE LBKT      &mt RIGHT_BRACE RBKT      &mo 3
            >;
        };
    };
};
