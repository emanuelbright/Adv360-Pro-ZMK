/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <400>;
};

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        check_battery: check_battery {
            compatible = "zmk,behavior-tap-dance";
            label = "CHECK_BATTERY";
            #binding-cells = <0>;
            bindings = <&mo 3>, <&rgb_ug RGB_TOG>;
        };

        tap_and_mo: tap_and_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_AND_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <400>;
        };

        tap_and_tog: tap_and_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_AND_TOG";
            bindings = <&tog>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        alt_windows_left: alt_windows_left {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_WINDOWS_LEFT";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&kp LWIN>;
        };

        alt_windows_right: alt_windows_right {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_WINDOWS_RIGHT";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_ALT>, <&kp RIGHT_WIN>;
        };

        tap_and_hold: tap_and_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_AND_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };
    };

    combos { compatible = "zmk,combos"; };

    macros {
        align_win_up: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RWIN &kp UP>, <&macro_tap>;

            label = "NEW_MACRO";
        };

        align_win_down: align_win_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RWIN &kp DOWN>, <&macro_tap>;

            label = "ALIGN_WIN_DOWN";
        };

        align_win_left: align_win_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LWIN &kp LEFT>, <&macro_tap>;

            label = "ALIGN_WIN_LEFT";
        };

        align_win_right: align_win_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LWIN &kp RIGHT>, <&macro_tap>;

            label = "ALIGN_WIN_RIGHT";
        };

        start_calculator: start_calculator {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LWIN &kp C &kp A &kp L &kp C &kp U &kp L &kp A &kp T &kp O &kp R &kp ENTER>,
                <&macro_tap>;

            label = "START_CALCULATOR";
        };

        lock_user: lock_user {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LWIN &kp L>, <&macro_tap>;

            label = "LOCK_USER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LS(EQUAL) EQUAL  &mt LS(N1) N1            &mt LS(N2) N2        &mt LS(N3) NUMBER_3  &mt LS(N4) N4  &mt LS(N5) N5  &lock_user                                                                         &kp INS            &mt RS(N6) NUMBER_6  &mt RS(N7) N7  &mt RS(N8) N8        &mt RS(N9) N9      &mt RS(N0) N0      &mt RS(MINUS) MINUS
&kp TAB              &mt LC(Q) Q              &mt LC(W) W          &mt LC(F) F          &mt LC(P) P    &mt LC(B) B    &kp PSCRN                                                                          &start_calculator  &mt RC(J) J          &mt RC(L) L    &mt RC(U) U          &mt RC(Y) Y        &mt RS(SEMI) SEMI  &mt RS(BSLH) BSLH
&kp ESC              &mt LC(A) A              &mt LC(R) R          &mt LC(S) S          &mt LC(T) T    &mt LC(G) G    &kp LWIN       &kp LCTRL  &kp LALT                &kp RALT              &kp RCTRL  &kp LWIN           &mt RC(M) M          &mt RC(N) N    &mt RC(E) E          &mt RC(I) I        &mt RC(O) O        &mt RS(SQT) SQT
&kp LEFT_SHIFT       &mt LC(Z) Z              &mt LC(X) X          &mt LC(C) C          &mt LC(D) D    &mt LC(V) V                              &tap_and_mo 1 HOME      &tap_and_mo 1 PG_UP                                 &mt RC(K) K          &mt RC(H) H    &mt RS(COMMA) COMMA  &mt RS(DOT) DOT    &mt RS(FSLH) FSLH  &kp RIGHT_SHIFT
&mo 3                &mt K_CONTEXT_MENU CAPS  &mt LS(GRAVE) GRAVE  &kp LEFT             &kp RIGHT                     &kp BACKSPACE  &kp SPACE  &tap_and_tog 2 END      &tap_and_tog 2 PG_DN  &kp ENTER  &kp DEL                                 &kp UP         &kp DOWN             &mt RS(LBKT) LBKT  &mt RS(RBKT) RBKT  &mo 3
            >;
        };

        layer_symbols {
            bindings = <
&kp TILDE  &kp GRAVE  &kp POUND  &kp SEMI   &kp COLON   &none  &none                                    &none  &none  &kp BSLH  &kp FSLH  &kp PIPE   &none           &none
&none      &kp PRCNT  &kp DLLR   &kp SQT    &kp DQT     &none  &none                                    &none  &none  &kp LBKT  &kp RBKT  &kp LT     &kp GT          &none
&none      &kp AT     &kp AMPS   &kp COMMA  &kp PERIOD  &none  &none  &none  &none       &none   &none  &none  &none  &kp LPAR  &kp RPAR  &kp MINUS  &kp UNDERSCORE  &none
&none      &kp CARET  &kp ASTRK  &kp EXCL   &kp QMARK   &none                &trans      &trans                &none  &kp LBRC  &kp RBRC  &kp EQUAL  &kp PLUS        &none
&none      &none      &none      &none      &none              &none  &none  &none       &none   &none  &none         &none     &none     &none      &none           &none
            >;
        };

        layer_keypad {
            bindings = <
&none  &none       &kp LPAR  &kp RPAR  &kp FSLH  &none      &none                                                          &none          &none      &kp LPAR  &kp RPAR  &kp FSLH  &none      &none
&none  &kp EQUAL   &kp N7    &kp N8    &kp N9    &kp ASTRK  &none                                                          &none          &kp EQUAL  &kp N7    &kp N8    &kp N9    &kp ASTRK  &none
&none  &kp PERIOD  &kp N4    &kp N5    &kp N6    &kp PLUS   &none          &none      &none          &none      &none      &none          &kp DOT    &kp N4    &kp N5    &kp N6    &kp PLUS   &none
&none  &kp N0      &kp N1    &kp N2    &kp N3    &kp MINUS                            &kp CLEAR      &kp CLEAR                            &kp N0     &kp N1    &kp N2    &kp N3    &kp MINUS  &none
&none  &none       &none     &trans    &trans               &kp BACKSPACE  &kp ENTER  &none          &trans     &kp ENTER  &kp BACKSPACE             &trans    &trans    &none     &none      &none
            >;
        };

        layer_fn {
            bindings = <
&none       &kp F1        &kp F2        &kp F3           &kp F4            &kp F5        &kp F11                                                                 &kp F12                 &kp F6  &kp F7          &kp F8           &kp F9    &kp F10  &none
&none       &none         &none         &none            &none             &none         &none                                                                   &none                   &none   &none           &none            &none     &none    &none
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3      &bt BT_SEL 4  &none    &rgb_ug RGB_TOG  &bl BL_TOG      &kp C_MUTE       &none        &rgb_ug RGB_MEFS_CMD 5  &none   &kp KP_NUMLOCK  &kp CAPS         &kp SLCK  &none    &none
&none       &none         &none         &none            &macro_ver        &none                                   &bl BL_INC      &kp C_VOLUME_UP                                       &none   &none           &none            &none     &none    &none
&trans      &none         &none         &align_win_left  &align_win_right                &none    &bootloader      &bl BL_DEC      &kp C_VOL_DN     &bootloader  &none                           &align_win_up   &align_win_down  &none     &none    &trans
            >;
        };
    };
};
